{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\nimport React from 'react';\nimport MapView from 'react-native-maps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var Home = function (_React$Component) {\n  _inherits(Home, _React$Component);\n\n  var _super = _createSuper(Home);\n\n  function Home(props) {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _super.call(this, props);\n\n    _this.getDataFromServer = function _callee() {\n      var response;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch('https://cyber-cycle-lock-server.herokuapp.com/'));\n\n            case 2:\n              response = _context.sent;\n              console.log(response);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.toggle = function () {\n      _this.setState({\n        region: {\n          latitude: 14.058324,\n          longitude: 108.277199,\n          latitudeDelta: 0.0922,\n          longitudeDelta: 0.0421\n        },\n        buttonBackgroundColor: _this.state.buttonBackgroundColor === \"red\" ? \"green\" : \"red\",\n        buttonText: _this.state.buttonText === \"Unlock\" ? \"Lock\" : \"Unlock\"\n      });\n    };\n\n    _this.registerForPushNotificationsAsync = function _callee2() {\n      var _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status, token;\n\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!Device.isDevice) {\n                _context2.next = 20;\n                break;\n              }\n\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n            case 3:\n              _await$Notifications$ = _context2.sent;\n              existingStatus = _await$Notifications$.status;\n              finalStatus = existingStatus;\n\n              if (!(existingStatus !== 'granted')) {\n                _context2.next = 12;\n                break;\n              }\n\n              _context2.next = 9;\n              return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n            case 9:\n              _await$Notifications$2 = _context2.sent;\n              status = _await$Notifications$2.status;\n              finalStatus = status;\n\n            case 12:\n              if (!(finalStatus !== 'granted')) {\n                _context2.next = 14;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 14:\n              _context2.next = 16;\n              return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n            case 16:\n              token = _context2.sent.data;\n\n              _this.setState({\n                expoPushToken: token\n              });\n\n              _context2.next = 21;\n              break;\n\n            case 20:\n              alert('Must use physical device for Push Notifications');\n\n            case 21:\n              if (Platform.OS === 'android') {\n                Notifications.setNotificationChannelAsync('default', {\n                  name: 'default',\n                  importance: Notifications.AndroidImportance.MAX,\n                  vibrationPattern: [0, 250, 250, 250],\n                  lightColor: '#FF231F7C'\n                });\n              }\n\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.alarmNotify = function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(Notifications.scheduleNotificationAsync({\n                content: {\n                  title: \"ALERT\",\n                  body: 'Bike has been tampered with. Tap to locate.',\n                  data: {\n                    data: 'goes here'\n                  }\n                },\n                trigger: {\n                  seconds: 1\n                }\n              }).catch(function (err) {\n                return console.log(err);\n              }));\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.navigate = function () {\n      _this.props.navigation.navigate('Devices');\n    };\n\n    _this.onRegionChange = function (region) {\n      _this.setState({\n        region: region\n      });\n    };\n\n    _this.createAlarm = function () {\n      return Alert.alert(\"ALERT\", \"Lock has been tampered with\", [{\n        text: \"Locate\"\n      }]);\n    };\n\n    _this.state = {\n      region: {\n        latitude: 14.058324,\n        longitude: 108.277199,\n        latitudeDelta: 0.0922,\n        longitudeDelta: 0.0421\n      },\n      buttonBackgroundColor: \"red\",\n      buttonText: \"Lock\",\n      token: null\n    };\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      Notifications.setNotificationHandler({\n        handleNotification: function handleNotification() {\n          return _regeneratorRuntime.async(function handleNotification$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  return _context4.abrupt(\"return\", {\n                    shouldShowAlert: true,\n                    shouldPlaySound: false,\n                    shouldSetBadge: false\n                  });\n\n                case 1:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        }\n      });\n      this.registerForPushNotificationsAsync();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          region = _this$state.region,\n          buttonBackgroundColor = _this$state.buttonBackgroundColor,\n          buttonText = _this$state.buttonText;\n      var colorStyles = {\n        backgroundColor: buttonBackgroundColor\n      };\n      return _jsxs(View, {\n        style: styles.container,\n        children: [_jsx(MapView, {\n          style: styles.map,\n          region: region,\n          onRegionChange: this.onRegionChange,\n          children: _jsx(MapView.Marker, {\n            coordinate: {\n              latitude: region.latitude,\n              longitude: region.longitude\n            },\n            children: _jsx(View, {\n              style: styles.radius,\n              children: _jsx(View, {\n                style: styles.marker\n              })\n            })\n          })\n        }), _jsxs(View, {\n          style: {\n            flex: 1,\n            flexDirection: 'row',\n            justifyContent: 'space-evenly',\n            alignItems: 'center'\n          },\n          children: [_jsx(TouchableOpacity, {\n            style: [styles.lockbutton, colorStyles],\n            onPress: this.toggle,\n            children: _jsx(Text, {\n              style: {\n                color: \"white\"\n              },\n              children: buttonText\n            })\n          }), _jsx(TouchableOpacity, {\n            style: styles.locksbutton,\n            onPress: this.navigate,\n            children: _jsx(Text, {\n              style: {\n                color: \"white\"\n              },\n              children: \"Devices\"\n            })\n          }), _jsx(Button, {\n            title: \"testButton\",\n            onPress: this.getDataFromServer,\n            color: \"red\"\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return Home;\n}(React.Component);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  radius: {\n    height: 50,\n    width: 50,\n    borderRadius: 25,\n    overflow: 'hidden',\n    backgroundColor: 'rgba(0, 122, 255, 0.1)',\n    borderWidth: 1,\n    borderColor: 'rgba(0, 122, 255, 0.3)',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  marker: {\n    height: 20,\n    width: 20,\n    borderWidth: 3,\n    borderColor: 'white',\n    borderRadius: 10,\n    overflow: 'hidden',\n    backgroundColor: '#007AFF'\n  },\n  map: {\n    left: 15,\n    right: 15,\n    top: 90,\n    bottom: 145,\n    position: 'absolute'\n  },\n  lockbutton: {\n    alignItems: 'center',\n    marginTop: 625,\n    paddingVertical: 25,\n    borderRadius: 10,\n    width: 125,\n    height: 70,\n    marginHorizontal: 20\n  },\n  locksbutton: {\n    alignItems: 'center',\n    marginTop: 625,\n    paddingVertical: 25,\n    borderRadius: 10,\n    width: 125,\n    height: 70,\n    backgroundColor: 'grey',\n    marginHorizontal: 20\n  }\n});","map":{"version":3,"sources":["/Users/masonwoodford/Desktop/Cyber-Cycle-Lock/src/Home.js"],"names":["Device","Notifications","React","MapView","Home","props","getDataFromServer","fetch","response","console","log","toggle","setState","region","latitude","longitude","latitudeDelta","longitudeDelta","buttonBackgroundColor","state","buttonText","registerForPushNotificationsAsync","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","getExpoPushTokenAsync","token","data","expoPushToken","alert","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","alarmNotify","scheduleNotificationAsync","content","title","body","trigger","seconds","catch","err","navigate","navigation","onRegionChange","createAlarm","Alert","text","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","colorStyles","backgroundColor","styles","container","map","radius","marker","flex","flexDirection","justifyContent","alignItems","lockbutton","color","locksbutton","Component","StyleSheet","create","height","width","borderRadius","overflow","borderWidth","borderColor","left","right","top","bottom","position","marginTop","paddingVertical","marginHorizontal"],"mappings":"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","sourcesContent":["import { StyleSheet, Text, View, TouchableOpacity, Alert, Button } from 'react-native';\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\nimport React from 'react';\nimport MapView from 'react-native-maps';\n\nexport class Home extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      region: {\n        latitude: 14.058324,\n        longitude: 108.277199,\n        latitudeDelta: 0.0922,\n        longitudeDelta: 0.0421,\n      },\n      buttonBackgroundColor: \"red\",\n      buttonText: \"Lock\",\n      token: null,\n    }\n  }\n\n  getDataFromServer = async () => {\n    let response = await fetch(\n      'https://cyber-cycle-lock-server.herokuapp.com/'\n    );\n    console.log(response);\n  };\n\n  toggle = () => {\n    this.setState({\n      region: {\n        latitude: 14.058324,\n        longitude: 108.277199,\n        latitudeDelta: 0.0922,\n        longitudeDelta: 0.0421,\n      },\n      buttonBackgroundColor: this.state.buttonBackgroundColor === \"red\" ? \"green\" : \"red\",\n      buttonText: this.state.buttonText === \"Unlock\" ? \"Lock\" : \"Unlock\"\n    });\n  }\n\n  componentDidMount() {\n    Notifications.setNotificationHandler({\n      handleNotification: async () => ({\n        shouldShowAlert: true,\n        shouldPlaySound: false,\n        shouldSetBadge: false,\n      }),\n    });\n    this.registerForPushNotificationsAsync();\n  }\n\n  registerForPushNotificationsAsync = async () => {\n    if (Device.isDevice) {\n      const { status: existingStatus } = await Notifications.getPermissionsAsync();\n      let finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        const { status } = await Notifications.requestPermissionsAsync();\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        return;\n      }\n      const token = (await Notifications.getExpoPushTokenAsync()).data;\n      this.setState({ expoPushToken: token });\n    } else {\n      alert('Must use physical device for Push Notifications');\n    }\n  \n    if (Platform.OS === 'android') {\n      Notifications.setNotificationChannelAsync('default', {\n        name: 'default',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF231F7C',\n      });\n    }\n  };\n\n  alarmNotify = async () =>{\n    await Notifications.scheduleNotificationAsync({\n      content: {\n        title: \"ALERT\",\n        body: 'Bike has been tampered with. Tap to locate.',\n        data: { data: 'goes here' },\n      },\n      trigger: { seconds: 1 },\n    }).catch(err => console.log(err));\n  }\n\n  navigate = () => {\n    this.props.navigation.navigate('Devices')\n  }\n\n  onRegionChange = (region) => {\n    this.setState({ region });\n  } \n\n  createAlarm = () =>\n  Alert.alert(\n    \"ALERT\",\n    \"Lock has been tampered with\",\n    [\n      { text: \"Locate\" }\n    ]\n  );\n\n  render() {\n    const {region, buttonBackgroundColor, buttonText} = this.state\n    const colorStyles = {\n      backgroundColor: buttonBackgroundColor\n    }\n    return (\n      <View style={styles.container}>\n        <MapView \n          style={styles.map} \n          region={region}\n          onRegionChange={this.onRegionChange}\n        >\n          <MapView.Marker\n            coordinate={{        \n              latitude: region.latitude,\n              longitude: region.longitude\n            }}>\n              <View style={styles.radius}>\n                <View style={styles.marker} />\n              </View>\n          </MapView.Marker>\n        </MapView>\n        <View style={{flex: 1, flexDirection: 'row', justifyContent: 'space-evenly', alignItems: 'center'}}>\n          <TouchableOpacity \n            style={[styles.lockbutton, colorStyles]}\n            onPress={this.toggle}\n          >\n            <Text style={{color: \"white\"}}>{buttonText}</Text>\n          </TouchableOpacity>\n          <TouchableOpacity \n            style={styles.locksbutton}\n            onPress={this.navigate}\n          >\n            <Text style={{color: \"white\"}}>Devices</Text>\n          </TouchableOpacity>\n          <Button title=\"testButton\" onPress={this.getDataFromServer} color=\"red\"/>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radius: {\n    height: 50,\n    width: 50,\n    borderRadius: 25,\n    overflow: 'hidden',\n    backgroundColor: 'rgba(0, 122, 255, 0.1)',\n    borderWidth: 1,\n    borderColor: 'rgba(0, 122, 255, 0.3)',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  marker: {\n    height: 20,\n    width: 20,\n    borderWidth: 3,\n    borderColor: 'white',\n    borderRadius: 10,\n    overflow: 'hidden',\n    backgroundColor: '#007AFF'\n  },\n  map: {\n    left: 15,\n    right: 15,\n    top: 90,\n    bottom: 145,\n    position: 'absolute',\n  },\n  lockbutton: {\n    alignItems: 'center',\n    marginTop: 625,\n    paddingVertical: 25,\n    borderRadius: 10,\n    width: 125,\n    height: 70,\n    marginHorizontal: 20\n  },\n  locksbutton: {\n    alignItems: 'center',\n    marginTop: 625,\n    paddingVertical: 25,\n    borderRadius: 10,\n    width: 125,\n    height: 70,\n    backgroundColor: 'grey',\n    marginHorizontal: 20\n  },\n});\n"]},"metadata":{},"sourceType":"module"}